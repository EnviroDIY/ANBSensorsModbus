{
  "version": "1.14.0",
  "compound": {
    "kind": "class",
    "id": "classanb_sensor",
    "name": "anbSensor",
    "url_base": "classanb_sensor",
    "url": "classanb_sensor.html",
    "include": [
      "&lt;src/ANBSensorsModbus.h&gt;",
      "_a_n_b_sensors_modbus_8h.html"
    ],
    "has_template_details": false,
    "templates": null,
    "brief": "The Main Class.",
    "description": "<p>This is the class for communication with ANB pH sensors via modbus.</p>",
    "sections": "",
    "deprecated": null,
    "since": null,
    "example_navigation": null,
    "footer_navigation": null,
    "topics": [],
    "dirs": [],
    "files": [],
    "namespaces": [],
    "classes": [],
    "base_classes": [],
    "derived_classes": [],
    "enums": [],
    "typedefs": [],
    "funcs": [],
    "vars": [],
    "defines": [],
    "public_types": [],
    "public_static_funcs": [],
    "typeless_funcs": [],
    "public_funcs": [
      {
        "base_url": "classanb_sensor.html",
        "id": "a3b89a1a58e79e73b78b93a0dc87115df",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "begin",
        "brief": "This function sets up the communication.",
        "description": "<p>It should be run during the arduino &quot;setup&quot; function. The &quot;stream&quot; device must be initialized prior to running this.</p><aside class=\"m-note m-info\"><h4>Note</h4><p>The default Modbus address is 0x55 (decimal 85), but it can be any value between 0x01 and 0xFE <em>except 0x23</em>.</p></aside><aside class=\"m-note m-danger\"><h4>Warning</h4><p>The address 0x23 cannot be used!</p></aside>",
        "return_value": "True if the starting communication was successful, false if not.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "modbusSlaveID",
            "type": "byte",
            "type_name": "byte modbusSlaveID",
            "default": null,
            "description": "The byte identifier of the modbus slave device.",
            "direction": ""
          },
          {
            "name": "stream",
            "type": "Stream*",
            "type_name": "Stream* stream",
            "default": null,
            "description": "A pointer to the Arduino stream object to communicate with.",
            "direction": ""
          },
          {
            "name": "enablePin",
            "type": "int",
            "type_name": "int enablePin",
            "default": "-1",
            "description": "A pin on the Arduino processor to use to send an enable signal to an RS485 to TTL adapter. Use a negative number if this does not apply. Optional with a default value of -1.",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "classanb_sensor.html",
        "id": "ac5b1ef8f4b333920b62f9b8fa92ee496",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "begin",
        "brief": "This function sets up the communication.",
        "description": "<p>It should be run during the arduino &quot;setup&quot; function. The &quot;stream&quot; device must be initialized prior to running this.</p><aside class=\"m-note m-info\"><h4>Note</h4><p>The default Modbus address is 0x55, but it can be any number between 0x01 and 0xFE <em>except 0x23</em>.</p></aside><aside class=\"m-note m-danger\"><h4>Warning</h4><p>The address 0x23 cannot be used!</p></aside>",
        "return_value": "True if the starting communication was successful, false if not.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "modbusSlaveID",
            "type": "byte",
            "type_name": "byte modbusSlaveID",
            "default": null,
            "description": "The byte identifier of the modbus slave device.",
            "direction": ""
          },
          {
            "name": "stream",
            "type": "Stream&amp;",
            "type_name": "Stream&amp; stream",
            "default": null,
            "description": "A reference to the Arduino stream object to communicate with.",
            "direction": ""
          },
          {
            "name": "enablePin",
            "type": "int",
            "type_name": "int enablePin",
            "default": "-1",
            "description": "A pin on the Arduino processor to use to send an enable signal to an RS485 to TTL adapter. Use a negative number if this does not apply. Optional with a default value of -1.",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "classanb_sensor.html",
        "id": "ac97d06cc9a7236a8f80807672e67a680",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "gotModbusResponse",
        "brief": "Check if the sensor has responded to the last Modbus command.",
        "description": "<aside class=\"m-note m-danger\"><h4>Warning</h4><p>This function only checks for a response to the last Modbus command. A correctly formatted Modbus error response is considered a valid response for this function.</p></aside>",
        "return_value": "True if the sensor has responded, false if not.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "classanb_sensor.html",
        "id": "a2c25ef434dc20559ef25eebac8047bfd",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "isSensorReady",
        "brief": "Check if the sensor is ready for a command or has completed a measurement.",
        "description": "",
        "return_value": "True if the sensor is ready, false if not.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "classanb_sensor.html",
        "id": "a2f969f149a06b9d118fcc2befdd20ddc",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "isMeasurementComplete",
        "brief": "Check if a measurement is complete.",
        "description": "<blockquote><p><strong>First Scan Command Delay</strong></p><p>After sending the first scan command there is a 2-3 min delay before the sensor will return a valid pH value. In this 90s the sensor will output an Exception which is signified by setting the MSB in the command byte and adding a payload byte that specifies the reason for the exception.</p><p>i.e. for the request:</p><p><code>&lt; ADDRESS &gt;&lt; 03 &gt;&lt; 00 &gt;&lt; 00 &gt;&lt; 00 &gt;&lt; 02 &gt;&lt; CRC &gt;</code></p><p>The exception reply when there is currently not a pH value to return is:</p></blockquote><blockquote><p><code>&lt; ADDRESS &gt;&lt; 83 &gt;&lt; 05 &gt;&lt; CRC &gt;</code></p></blockquote><blockquote><p>Where 05 = ACKNOWLEDGE This exception signifies that the sensor has received the Modbus communication but cannot currently perform the requested function. For example, requesting the current pH value when the sensor is not scanning.</p><p>or</p><p><code>&lt; ADDRESS &gt;&lt; 83 &gt;&lt; 06 &gt;&lt; CRC &gt;</code></p><p>Where 06 = BUSY This exception is transmitted when the sensor needs more time before it can perform the requested function. It will be necessary to re-transmit the request again at a later time. For example, requesting the current pH value, before the sensor has been able to calculate the value.</p></blockquote><p>The error responses documented by ANB Sensors will be returned for requests for pH values or health codes, but <strong>not</strong> when requesting the status code. The request for the status code will return a valid response even before the sensor is ready to start scanning.</p>",
        "return_value": "True if the measurement is complete, false if not.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      }
    ],
    "signals": [],
    "public_slots": [],
    "public_static_vars": [],
    "public_vars": [],
    "protected_types": [],
    "protected_static_funcs": [],
    "protected_funcs": [],
    "protected_slots": [],
    "protected_static_vars": [],
    "protected_vars": [],
    "private_funcs": [],
    "private_slots": [],
    "related": [],
    "friend_funcs": [],
    "groups": [
      {
        "name": "Functions to configure measurements",
        "id": "functions-to-configure-measurements",
        "description": "<p><a name=\"measurement_setting_fxns\"></a></p><p>These functions allow you to set mode, set salinity, set interval time, etc.</p><p><a href=\"https://www.anbsensors.com/newdocs/docs/modbus/#measurement-setting-functions\">Detailed function documentation is available here.</a></p><aside class=\"m-note m-info\"><h4>Note</h4><p>The Modbus instructions from ANB sensors state that the &quot;source&quot; for all of the measurement setting functions are input (read only) registers, but in all cases the functions use <strong>holding</strong> (read/write) registers. Most of the registers are, however, <strong>write only</strong> from within the modbus interface - attempting to read the registers will give an illegal function error.</p></aside>",
        "members": [
          [
            "func",
            {
              "base_url": "classanb_sensor.html",
              "id": "a55e3ee71b942c9930ff799c53c5c020b",
              "include": null,
              "has_details": true,
              "type": "<a href=\"_a_n_b_sensors_modbus_8h.html#a3b1deb940808f73ba4844cae7c299397\" class=\"m-doc\">ANBSensorMode</a>",
              "name": "getControlMode",
              "brief": "Get the sensor control mode.",
              "description": "<p>The control mode is in <s>input</s> <strong>holding</strong> register 0x0035 (decimal 53).</p><aside class=\"m-note m-danger\"><h4>Warning</h4><p>NOT YET SUPPORTED BY MODBUS COMMANDS. The sensor control mode is <strong>write only</strong> from within the modbus interface.</p></aside><aside class=\"m-note m-default\"><h4>See also</h4><p><a href=\"_a_n_b_sensors_modbus_8h.html#a3b1deb940808f73ba4844cae7c299397\" class=\"m-doc\">ANBSensorMode</a></p></aside>",
              "return_value": "A code for the control mode",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classanb_sensor.html",
              "id": "a484b67c711c9cc84d66bfc11494ff087",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "setControlMode",
              "brief": "Set the sensor control mode.",
              "description": "<p>Change this value to any of the following valid values: <a href=\"_a_n_b_sensors_modbus_8h.html#a3b1deb940808f73ba4844cae7c299397af3747d996531ebba24995fc9347092f5\" class=\"m-doc\">ANBSensorMode::<wbr />CONTROLLED</a>, <a href=\"_a_n_b_sensors_modbus_8h.html#a3b1deb940808f73ba4844cae7c299397ade7d660fc991e08c2d3526fec8a46c4a\" class=\"m-doc\">ANBSensorMode::<wbr />AUTONOMOUS</a></p><aside class=\"m-note m-info\"><h4>Note</h4><p>Requires power cycle to invoke autonomous mode</p></aside><p>The control mode is in <s>input</s> <strong>holding</strong> register 0x0035 (decimal 53).</p><aside class=\"m-note m-default\"><h4>See also</h4><p><a href=\"_a_n_b_sensors_modbus_8h.html#a3b1deb940808f73ba4844cae7c299397\" class=\"m-doc\">ANBSensorMode</a></p></aside>",
              "return_value": "True if the control mode was successfully set, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "newControlMode",
                  "type": "<a href=\"_a_n_b_sensors_modbus_8h.html#a3b1deb940808f73ba4844cae7c299397\" class=\"m-doc\">ANBSensorMode</a>",
                  "type_name": "<a href=\"_a_n_b_sensors_modbus_8h.html#a3b1deb940808f73ba4844cae7c299397\" class=\"m-doc\">ANBSensorMode</a> newControlMode",
                  "default": null,
                  "description": "The new control mode to use",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classanb_sensor.html",
              "id": "a241398aa01f09f779ba1c9bd14654cd5",
              "include": null,
              "has_details": true,
              "type": "<a href=\"_a_n_b_sensors_modbus_8h.html#a950b508646da9d8018f7d7f3aaf3210b\" class=\"m-doc\">ANBSalinityMode</a>",
              "name": "getSalinityMode",
              "brief": "Get the sensor salinity mode.",
              "description": "<p>The salinity mode is in <s>input</s> <strong>holding</strong> register 0x003E (decimal 62).</p><aside class=\"m-note m-danger\"><h4>Warning</h4><p>NOT YET SUPPORTED BY MODBUS COMMANDS. The salinity mode is <strong>write only</strong> from within the modbus interface.</p></aside>",
              "return_value": "A code for the salinity mode",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classanb_sensor.html",
              "id": "a60f99dae40f546d8c3c79019bf3b463f",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "setSalinityMode",
              "brief": "Set the sensor salinity mode.",
              "description": "<p>Change this value to any of the following valid values: <a href=\"_a_n_b_sensors_modbus_8h.html#a950b508646da9d8018f7d7f3aaf3210ba53d709f9f30ec8f66ee61277b8b8c933\" class=\"m-doc\">ANBSalinityMode::<wbr />LOW_SALINITY</a>, <a href=\"_a_n_b_sensors_modbus_8h.html#a950b508646da9d8018f7d7f3aaf3210ba7e911e2cccc3930c652bbf25651155cc\" class=\"m-doc\">ANBSalinityMode::<wbr />HIGH_SALINITY</a></p><aside class=\"m-note m-info\"><h4>Note</h4><p>Before scanning set the expected salinity.</p></aside><p>The salinity mode is in <s>input</s> <strong>holding</strong> register 0x003E (decimal 62).</p>",
              "return_value": "True if the salinity mode was successfully set, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "newSalinityMode",
                  "type": "<a href=\"_a_n_b_sensors_modbus_8h.html#a950b508646da9d8018f7d7f3aaf3210b\" class=\"m-doc\">ANBSalinityMode</a>",
                  "type_name": "<a href=\"_a_n_b_sensors_modbus_8h.html#a950b508646da9d8018f7d7f3aaf3210b\" class=\"m-doc\">ANBSalinityMode</a> newSalinityMode",
                  "default": null,
                  "description": "The new salinity mode to use",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classanb_sensor.html",
              "id": "adc5f2f2825318aa42bcb74d7269f8375",
              "include": null,
              "has_details": true,
              "type": "<a href=\"_a_n_b_sensors_modbus_8h.html#a3479585d29aee3ef7695e222278e2858\" class=\"m-doc\">ANBPowerStyle</a>",
              "name": "getPowerStyle",
              "brief": "Get the sensor power style.",
              "description": "<p>The power style is in <s>input</s> <strong>holding</strong> register 0x003F (decimal 63).</p><aside class=\"m-note m-danger\"><h4>Warning</h4><p>NOT YET SUPPORTED BY MODBUS COMMANDS. The power style is <strong>write only</strong> from within the modbus interface.</p></aside>",
              "return_value": "A code for the power style",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classanb_sensor.html",
              "id": "a53483df45d49e3764c1734645d8427fe",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "setPowerStyle",
              "brief": "Set the sensor power style.",
              "description": "<p>Change this value to any of the following valid values: <a href=\"_a_n_b_sensors_modbus_8h.html#a3479585d29aee3ef7695e222278e2858ae1a6ec4b6f5b0b61d29c5210f417253a\" class=\"m-doc\">ANBPowerStyle::<wbr />ALWAYS_POWERED</a>, <a href=\"_a_n_b_sensors_modbus_8h.html#a3479585d29aee3ef7695e222278e2858a28fbe6a459e9f9cf16ee3c846cc9d12b\" class=\"m-doc\">ANBPowerStyle::<wbr />ON_MEASUREMENT</a></p><aside class=\"m-note m-info\"><h4>Note</h4><p>Before scanning set the desired power style.</p></aside><p>The power style is in <s>input</s> <strong>holding</strong> register 0x003F (decimal 63).</p>",
              "return_value": "True if the power style was successfully set, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "newPowerStyle",
                  "type": "<a href=\"_a_n_b_sensors_modbus_8h.html#a3479585d29aee3ef7695e222278e2858\" class=\"m-doc\">ANBPowerStyle</a>",
                  "type_name": "<a href=\"_a_n_b_sensors_modbus_8h.html#a3479585d29aee3ef7695e222278e2858\" class=\"m-doc\">ANBPowerStyle</a> newPowerStyle",
                  "default": null,
                  "description": "The new power style to use",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classanb_sensor.html",
              "id": "a588cf9c78a3210678746f3e6db8126af",
              "include": null,
              "has_details": true,
              "type": "uint8_t",
              "name": "getIntervalTime",
              "brief": "Get the current interval time.",
              "description": "<p>Returns the interval time in minutes. A value of 0 indicates continuous operation, while any other value represents the interval in minutes between measurements. The minimum interval time for interval mode is 10 minutes. The maximum interval time is 240 minutes.</p><p>The interval time is stored in <s>input</s> <strong>holding</strong> register 0x0036 (decimal 54).</p><aside class=\"m-note m-info\"><h4>Note</h4><p>The interval time only applies if the sensor is in autonomous mode and always powered. The sensor will go into a low power state during the set interval.</p></aside>",
              "return_value": "The current interval time in minutes. 0 indicates continuous operation.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classanb_sensor.html",
              "id": "aa7675a1d34848195df0f2b6860cfcfe9",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "setIntervalTime",
              "brief": "Set the sensor interval time.",
              "description": "<p>Change this value to any of the following valid values:</p><ul><li>0 for continuous operation</li><li>10-240 for interval mode (in minutes)</li></ul><p>The new interval time <strong>does not take effect</strong> until the next bootup.</p><aside class=\"m-note m-info\"><h4>Note</h4><p>The interval time only applies if the sensor is in autonomous mode and always powered. The sensor will go into a low power state during the set interval.</p></aside><p>The interval time is stored in <s>input</s> <strong>holding</strong> register 0x0036 (decimal 54).</p>",
              "return_value": "True if the interval time was successfully set, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "newIntervalTime",
                  "type": "uint8_t",
                  "type_name": "uint8_t newIntervalTime",
                  "default": null,
                  "description": "The new interval time to use",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classanb_sensor.html",
              "id": "a896b5b5af9173e03cc0879c5df875ab5",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "getStartDelay",
              "brief": "Get the current sensor start delay.",
              "description": "<p>The start delay is the time that the sensor waits before taking its first measurement after booting up. A value of 0 indicates no delay. The maximum value is 24 hours.</p><aside class=\"m-note m-info\"><h4>Note</h4><p>The start delay only applies if the sensor is in autonomous mode and always powered.</p></aside><aside class=\"m-note m-danger\"><h4>Warning</h4><p>NOT YET SUPPORTED BY MODBUS COMMANDS</p></aside>",
              "return_value": "True if the start delay was successfully retrieved, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "hours",
                  "type": "uint16_t&amp;",
                  "type_name": "uint16_t&amp; hours",
                  "default": null,
                  "description": "Reference to a uint8_t where the hours part of the start delay will be stored.",
                  "direction": ""
                },
                {
                  "name": "minutes",
                  "type": "uint16_t&amp;",
                  "type_name": "uint16_t&amp; minutes",
                  "default": null,
                  "description": "Reference to a uint8_t where the minutes part of the start delay will be stored.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classanb_sensor.html",
              "id": "a6bc49d4a042ae054c28f7a1e31ee78c1",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "setStartDelay",
              "brief": "Set the sensor start delay.",
              "description": "<p>The start delay is the time that the sensor waits before taking its first measurement after booting up. A value of 0 indicates no delay. The maximum value is 24 hours.</p><aside class=\"m-note m-info\"><h4>Note</h4><p>The start delay only applies if the sensor is in autonomous mode and always powered.</p></aside><aside class=\"m-note m-danger\"><h4>Warning</h4><p>NOT YET SUPPORTED BY MODBUS COMMANDS</p></aside>",
              "return_value": "True if the start delay was successfully set, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "hours",
                  "type": "uint16_t",
                  "type_name": "uint16_t hours",
                  "default": null,
                  "description": "The hours part of the new start delay (0-24)",
                  "direction": ""
                },
                {
                  "name": "minutes",
                  "type": "uint16_t",
                  "type_name": "uint16_t minutes",
                  "default": null,
                  "description": "The minutes part of the new start delay (0-59)",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classanb_sensor.html",
              "id": "aaca0261f25b80dfa893e60b8856c92f4",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "isImmersionSensorEnabled",
              "brief": "Check if the immersion sensor is enabled.",
              "description": "<blockquote><ul><li>The immersion sensor checks whether the sensor is submerged in water.</li><li>If the sensor is not immersed, it will stop measurement and set the Transducer Health status to 4.</li><li>In Continuous Mode, the sensor will wait for 5 minutes before checking again.</li><li>In Interval Delay Mode, the sensor will wait for the configured interval delay before rechecking.</li><li>Measurement will automatically resume once immersion is detected.</li></ul></blockquote><aside class=\"m-note m-info\"><h4>Note</h4><p>This function is not available on ATX sensors (S/N &lt;300200).</p></aside><p>The immersion sensor status (immersion rule) is in <s>input</s> <strong>holding</strong> register 0x003C (decimal 60).</p>",
              "return_value": "True if the immersion sensor is enabled, false otherwise.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classanb_sensor.html",
              "id": "a1daa27df10ade31ad6cb935cb4b99570",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "enableImmersionSensor",
              "brief": "Enable or disable the immersion sensor.",
              "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>The new immersion sensor status (immersion rule) is effective immediately. When power cycled, the immersion sensor defaults to enabled and the sensor goes into a low power mode.</p></aside><p>The immersion sensor status (immersion rule) is in <s>input</s> <strong>holding</strong> register 0x003C (decimal 60).</p>",
              "return_value": "True if the immersion sensor status was successfully set, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "enable",
                  "type": "bool",
                  "type_name": "bool enable",
                  "default": "true",
                  "description": "True to enable the immersion sensor, false to disable",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classanb_sensor.html",
              "id": "a97639c1438c3d8a79f5d4d44200d12a8",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "isFastProfilingEnabled",
              "brief": "Check if fast profiling is enabled.",
              "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>Fast profiling allows for a faster response to pH changes, with an accuracy of +/- 0.1 pH unit. Fast profiling is only available when taking continuous measurements - which also requires that the sensor be in autonomous mode and always powered.</p></aside><aside class=\"m-note m-danger\"><h4>Warning</h4><p>NOT YET SUPPORTED BY MODBUS COMMANDS</p></aside>",
              "return_value": "True if fast profiling is enabled, false otherwise.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classanb_sensor.html",
              "id": "a78a6ba4602dc755e880ca95f1fa80949",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "enableFastProfiling",
              "brief": "Enables or disables the fast profiling mode.",
              "description": "<aside class=\"m-note m-danger\"><h4>Warning</h4><p>NOT YET SUPPORTED BY MODBUS COMMANDS. Use ABN utils or the serial terminal prompt to enable or disable this feature.</p></aside>",
              "return_value": "True if the command was successfully sent, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "enable",
                  "type": "bool",
                  "type_name": "bool enable",
                  "default": "true",
                  "description": "True to enable fast profiling mode, false to disable",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classanb_sensor.html",
              "id": "a1a0db7008f3a53e56dabfb31c2d83b0d",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "isSDCardEnabled",
              "brief": "Check if SD card is enabled.",
              "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>The sensor has internal memory which can be switched off to save power if necessary. If the internal memory is switched off, no data will be saved in the sensor. All data must be saved externally.</p><p>Data can only be downloaded the you computer of uploaded to the ANB cloud using the serial terminal interface or ANB utils.</p></aside><aside class=\"m-note m-danger\"><h4>Warning</h4><p>NOT YET SUPPORTED BY MODBUS COMMANDS</p></aside>",
              "return_value": "True if SD card is enabled, false otherwise.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classanb_sensor.html",
              "id": "a2493ec4438c1e0c2e95398ac472b22ed",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "enableSDCard",
              "brief": "Enables or disables the SD card.",
              "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>Disabling the SD card will reduce power consumption by the sensor.</p></aside><aside class=\"m-note m-danger\"><h4>Warning</h4><p>NOT YET SUPPORTED BY MODBUS COMMANDS. Use ABN utils or the serial terminal prompt to enable or disable this feature.</p></aside>",
              "return_value": "True if the command was successfully sent, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "enable",
                  "type": "bool",
                  "type_name": "bool enable",
                  "default": "true",
                  "description": "True to enable SD card, false to disable",
                  "direction": ""
                }
              ]
            }
          ]
        ]
      },
      {
        "name": "Functions to start and stop measurements",
        "id": "functions-to-start-and-stop-measurements",
        "description": "<p><a name=\"command_fxns\"></a></p><p><a href=\"https://www.anbsensors.com/newdocs/docs/modbus/#command-functions\">Detailed function documentation is available here.</a></p>",
        "members": [
          [
            "func",
            {
              "base_url": "classanb_sensor.html",
              "id": "a18ca7780446b8b48942853cfbaad0ae4",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "start",
              "brief": "Tells the sensor to begin a scan (taking measurements)",
              "description": "<p>The start scan command is set with <strong>coil</strong> 0x0100 (decimal 256).</p><blockquote><p>After sending the first scan command there is a 2-3 min delay before the sensor will return a valid pH value. In this 90s the sensor will output an Exception which is signified by setting the MSB in the command byte and adding a payload byte that specifies the reason for the exception.</p><p>i.e. for the request:</p><p>&lt; ADDRESS &gt;&lt; 03 &gt;&lt; 00 &gt;&lt; 00 &gt;&lt; 00 &gt;&lt; 02 &gt;&lt; CRC &gt;</p><p>The exception reply when there is currently not a pH value to return is:</p><p>&lt; ADDRESS &gt;&lt; 83 &gt;&lt; 05 &gt;&lt; CRC &gt;</p><p>Where 05 = ACKNOWLEDGE This exception signifies that the sensor has received the Modbus communication but cannot currently perform the requested function. For example, requesting the current pH value when the sensor is not scanning.</p><p>or</p><p>&lt; ADDRESS &gt;&lt; 83 &gt;&lt; 06 &gt;&lt; CRC &gt;</p><p>Where 06 = BUSY This exception is transmitted when the sensor needs more time before it can perform the requested function. It will be necessary to re-transmit the request again at a later time. For example, requesting the current pH value before the sensor has been able to calculate the value.</p><p>NB. All data is big endian</p></blockquote><aside class=\"m-note m-danger\"><h4>Warning</h4><p>Do not run the sensors in pH buffer solutions. They are for use in seawater - freshwater.</p></aside>",
              "return_value": "True if the scan was successfully started, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classanb_sensor.html",
              "id": "aad524bb971c5f4d871715032f57267c0",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "abradeSensor",
              "brief": "Inform the sensor that the transducer has been abraded.",
              "description": "<p>If the sensor is told that it has been abraded, it resets all internal sensor settings.</p><p>The abrade sensor command is set with <strong>coil</strong> 0x0180 (decimal 384).</p><p>[Detailed maintenance guidelines including how to abrade the sensor can be found here.](<a href=\"https://www.anbsensors.com/newdocs/docs/transducer-maintenance/\">https:/<wbr />/<wbr />www.anbsensors.com/<wbr />newdocs/<wbr />docs/<wbr />transducer-maintenance/<wbr /></a>)</p>",
              "return_value": "True if the sensor was successfully informed of the abrasion, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classanb_sensor.html",
              "id": "a5b8bda7434d362de90cd03217a194532",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "stop",
              "brief": "Tells the sensors to stop scanning (taking measurements)",
              "description": "<p>This saves the current results and closes the pH results file, but leaves the sensor powered. The next start-measurement command will open a new file, if the SD card is enabled.</p><p>The stop command is set with <strong>coil</strong> 0x0000</p>",
              "return_value": "True if the scan was successfully stopped, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classanb_sensor.html",
              "id": "a5358d4481b27f3f23a917047a04fcad9",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "reboot",
              "brief": "Tells the sensors to save the current sensor configuration and restart the sensor so it is ready to run with the saved configurations.",
              "description": "<p>The reboot command is set by writing 0xFFFF to <s>input</s> <strong>holding</strong> register 0x1000</p><aside class=\"m-note m-danger\"><h4>Warning</h4><p>Due to firmware errors, after sending this command, the sensor may revert to terminal mode, requiring a <code><a href=\"#aad0aba0d6bfff4ab7c0dc9a0d5e61bcb\" class=\"m-doc\">forceModbus()</a></code> command to put it back into modbus mode.</p></aside>",
              "return_value": "True if the sensor was successfully rebooted and began responding to Modbus commands again, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classanb_sensor.html",
              "id": "aefab5aab21abdc6f85a4969951996784",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "shutdown",
              "brief": "Tells the sensors to save the current results and turn off the sensor.",
              "description": "<p>This saves the current results and closes the pH results file leaving the sensor ready to power down.</p><aside class=\"m-note m-danger\"><h4>Warning</h4><p>NOT YET SUPPORTED BY MODBUS COMMANDS</p></aside>",
              "return_value": "True if the sensor was successfully rebooted, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ]
        ]
      },
      {
        "name": "Functions to get one or more values from a sensor.",
        "id": "functions-to-get-one-or-more-values-from-a-sensor",
        "description": "<p><a name=\"measurement_output_fxns\"></a></p><p><a href=\"https://www.anbsensors.com/newdocs/docs/modbus/#measurement-output-functions\">Detailed function documentation is available here.</a></p>",
        "members": [
          [
            "func",
            {
              "base_url": "classanb_sensor.html",
              "id": "ad85dfa9d7e4ca57ff088628455a6568b",
              "include": null,
              "has_details": true,
              "type": "float",
              "name": "getpH",
              "brief": "Gets the current pH value from the sensor.",
              "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>If the pH output is 99.99, check the transducer health number for instruction.</p></aside><p>The pH value is stored in holding register 0x0000 (decimal 0).</p>",
              "return_value": "The pH value as a float. Passes the sensor returned 99.99 for a bad value and returns -9999 if the sensor could not be read.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classanb_sensor.html",
              "id": "a223a364296bd8d9272daf5b7c23c9bef",
              "include": null,
              "has_details": true,
              "type": "float",
              "name": "getTemperature",
              "brief": "Gets the current temperature in degrees Celsius (\u00b0C) from the sensor.",
              "description": "<p>The temperature value is stored in holding register 0x0002 (decimal 2).</p>",
              "return_value": "The temperature value in degrees Celsius (\u00b0C) as a float. Passes the sensor returned 99.99 for a bad value and returns -9999 if the sensor could not be read.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classanb_sensor.html",
              "id": "adde87b9fa94dc69df64619683c13e912",
              "include": null,
              "has_details": true,
              "type": "float",
              "name": "getSalinity",
              "brief": "Gets the current salinity in parts per thousand (ppt) from the sensor.",
              "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>If the salinity output is 99.99 but the pH output is OK, the salinity is out of range.</p><ul><li>Try changing your salinity setting</li><li>If expected salinity is &gt; 7ppt no salinity output is given</li></ul><p>If both the pH and salinity output is 99.99, check the transducer health number for instruction.</p></aside><p>The salinity value is stored in holding register 0x0004 (decimal 4).</p>",
              "return_value": "The salinity value as a float. Passes the sensor returned 99.99 for a bad value and returns -9999 if the sensor could not be read.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classanb_sensor.html",
              "id": "aabb1fbda795c61a2b3e432c1a9dcbf5a",
              "include": null,
              "has_details": true,
              "type": "float",
              "name": "getSpecificConductance",
              "brief": "Gets the current specific conductance in millisiemens per centimeter (mS/cm) from the sensor.",
              "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>If the specific conductance output is 99.99 but the pH output is OK, the salinity is out of range.</p><ul><li>Try changing your salinity setting</li><li>If expected salinity is &gt; 7ppt no salinity output is given</li></ul><p>If both the pH and specific conductance output is 99.99, check the transducer health number for instruction.</p></aside><p>The specific conductance value is stored in holding register 0x0006 (decimal 6).</p>",
              "return_value": "The specific conductance value as a float. Passes the sensor returned 99.99 for a bad value and returns -9999 if the sensor could not be read.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classanb_sensor.html",
              "id": "ae8b43f72fe2bbd0a8965bfc7518cb33f",
              "include": null,
              "has_details": true,
              "type": "<a href=\"_a_n_b_sensors_modbus_8h.html#ac075c53878b35483ebebc71e34e28cde\" class=\"m-doc\">ANBHealthCode</a>",
              "name": "getHealthCode",
              "brief": "Gets the current transducer health code from the sensor.",
              "description": "<p>The health code is stored in the lower byte of holding register 0x0008 (decimal 8).</p><aside class=\"m-note m-default\"><h4>See also</h4><p><a href=\"_a_n_b_sensors_modbus_8h.html#ac075c53878b35483ebebc71e34e28cde\" class=\"m-doc\">ANBHealthCode</a></p></aside>",
              "return_value": "The transducer health code; passes <a href=\"_a_n_b_sensors_modbus_8h.html#ac075c53878b35483ebebc71e34e28cdea696b031073e74bf2cb98e5ef201d4aa3\" class=\"m-doc\">ANBHealthCode::<wbr />UNKNOWN</a> (0xFF) if the sensor could not be read.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classanb_sensor.html",
              "id": "ae9d9aac129961aa0d8719f670e548203",
              "include": null,
              "has_details": true,
              "type": "float",
              "name": "getRawConductivity",
              "brief": "Gets the current raw (non-temperature compensated) conductivity in millisiemens per centimeter (mS/cm) from the sensor.",
              "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>If the raw conductivity output is 99.99 but the pH output is OK, the salinity is out of range.</p><ul><li>Try changing your salinity setting</li><li>If expected salinity is &gt; 7ppt no salinity output is given</li></ul><p>If both the pH and raw conductivity output is 99.99, check the transducer health number for instruction.</p></aside><p>The raw conductivity value is stored in holding register 0x0043 (decimal 67).</p>",
              "return_value": "The raw (actual) conductivity value as a float. Passes the sensor returned 99.99 for a bad value and returns -9999 if the sensor could not be read.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classanb_sensor.html",
              "id": "ad242fdd137ec378b2a8898208bb46028",
              "include": null,
              "has_details": true,
              "type": "<a href=\"_a_n_b_sensors_modbus_8h.html#a979abff66caa549f49fe1b5b3fdad560\" class=\"m-doc\">ANBStatusCode</a>",
              "name": "getStatusCode",
              "brief": "Gets the current status code from the sensor.",
              "description": "<p>The status code is stored as the first digit of the two digit value stored in the lower byte of holding register 0x0009 (decimal 9).</p><aside class=\"m-note m-default\"><h4>See also</h4><p><a href=\"_a_n_b_sensors_modbus_8h.html#a979abff66caa549f49fe1b5b3fdad560\" class=\"m-doc\">ANBStatusCode</a></p></aside>",
              "return_value": "The status code; passes <a href=\"_a_n_b_sensors_modbus_8h.html#a979abff66caa549f49fe1b5b3fdad560a696b031073e74bf2cb98e5ef201d4aa3\" class=\"m-doc\">ANBStatusCode::<wbr />UNKNOWN</a> (0xFF) if the sensor could not be read.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classanb_sensor.html",
              "id": "a646f10868dd8ae698d9486dcd64cd2b9",
              "include": null,
              "has_details": true,
              "type": "<a href=\"_a_n_b_sensors_modbus_8h.html#a5daa4dc2ee49b93517e437e7401c5eb2\" class=\"m-doc\">ANBDiagnosticCode</a>",
              "name": "getDiagnosticCode",
              "brief": "Gets the current diagnostics code from the sensor.",
              "description": "<p>The diagnostic code is stored as the second digit of the two digit value stored in the lower byte of holding register 0x0009 (decimal 9).</p><aside class=\"m-note m-default\"><h4>See also</h4><p><a href=\"_a_n_b_sensors_modbus_8h.html#a5daa4dc2ee49b93517e437e7401c5eb2\" class=\"m-doc\">ANBDiagnosticCode</a></p></aside>",
              "return_value": "The diagnostics code; passes <a href=\"_a_n_b_sensors_modbus_8h.html#a5daa4dc2ee49b93517e437e7401c5eb2a696b031073e74bf2cb98e5ef201d4aa3\" class=\"m-doc\">ANBDiagnosticCode::<wbr />UNKNOWN</a> (0xFF) if the sensor could not be read.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classanb_sensor.html",
              "id": "ab9212d883ab58a95cdd1297773b7f4f4",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "getValues",
              "brief": "Gets bulk values from all parameters.",
              "description": "<p>All parameters can be read from 11 (0x0B) holding registers starting at 0x0000.</p><p>BUT &ndash; the documentation also says that pH, temp, salinity, conductivity, and actual conductivity can all be read from those registers.. which would require 12 registers when you account for the codes.</p><aside class=\"m-note m-dim\"><h4><a href=\"todo.html#_todo000002\" class=\"m-doc\">Todo</a></h4><p>figure out what&#x27;s up with the raw conductivity register location</p></aside><p>If the values could not be read, the function will return false and the float output parameters (pH, temperature, salinity, specificConductance, rawConductivity) will be set to -9999. The non-float output parameters (status, diagnostics) will be set to 0xFF.</p>",
              "return_value": "True if the measurements were successfully obtained, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "pH",
                  "type": "float&amp;",
                  "type_name": "float&amp; pH",
                  "default": null,
                  "description": "The pH value",
                  "direction": ""
                },
                {
                  "name": "temperature",
                  "type": "float&amp;",
                  "type_name": "float&amp; temperature",
                  "default": null,
                  "description": "The temperature value",
                  "direction": ""
                },
                {
                  "name": "salinity",
                  "type": "float&amp;",
                  "type_name": "float&amp; salinity",
                  "default": null,
                  "description": "The salinity value",
                  "direction": ""
                },
                {
                  "name": "specificConductance",
                  "type": "float&amp;",
                  "type_name": "float&amp; specificConductance",
                  "default": null,
                  "description": "The specific conductance value",
                  "direction": ""
                },
                {
                  "name": "rawConductivity",
                  "type": "float&amp;",
                  "type_name": "float&amp; rawConductivity",
                  "default": null,
                  "description": "The &quot;actual&quot; (raw) conductivity value",
                  "direction": ""
                },
                {
                  "name": "health",
                  "type": "<a href=\"_a_n_b_sensors_modbus_8h.html#ac075c53878b35483ebebc71e34e28cde\" class=\"m-doc\">ANBHealthCode</a>&amp;",
                  "type_name": "<a href=\"_a_n_b_sensors_modbus_8h.html#ac075c53878b35483ebebc71e34e28cde\" class=\"m-doc\">ANBHealthCode</a>&amp; health",
                  "default": null,
                  "description": "The transducer health code",
                  "direction": ""
                },
                {
                  "name": "status",
                  "type": "<a href=\"_a_n_b_sensors_modbus_8h.html#a979abff66caa549f49fe1b5b3fdad560\" class=\"m-doc\">ANBStatusCode</a>&amp;",
                  "type_name": "<a href=\"_a_n_b_sensors_modbus_8h.html#a979abff66caa549f49fe1b5b3fdad560\" class=\"m-doc\">ANBStatusCode</a>&amp; status",
                  "default": null,
                  "description": "The transducer status code",
                  "direction": ""
                },
                {
                  "name": "diagnostic",
                  "type": "<a href=\"_a_n_b_sensors_modbus_8h.html#a5daa4dc2ee49b93517e437e7401c5eb2\" class=\"m-doc\">ANBDiagnosticCode</a>&amp;",
                  "type_name": "<a href=\"_a_n_b_sensors_modbus_8h.html#a5daa4dc2ee49b93517e437e7401c5eb2\" class=\"m-doc\">ANBDiagnosticCode</a>&amp; diagnostic",
                  "default": null,
                  "description": "The diagnostics code",
                  "direction": ""
                }
              ]
            }
          ]
        ]
      },
      {
        "name": "Admin Functions",
        "id": "admin-functions",
        "description": "<p><a name=\"admin_fxns\"></a></p><p><a href=\"https://www.anbsensors.com/newdocs/docs/modbus#admin-functions\">Administrative functions</a> to get and set the sensor address, communication settings, and clock and to get sensor metadata</p><aside class=\"m-note m-info\"><h4>Note</h4><p>The Modbus instructions from ANB sensors state that the &quot;source&quot; for several of the administrative functions are input (read only) registers, but in all cases the functions use <strong>holding</strong> (read/write) registers. Most of the mislabeled registers are, however, <strong>write only</strong> from within the modbus interface - attempting to read the registers will give an illegal function error.</p></aside>",
        "members": [
          [
            "func",
            {
              "base_url": "classanb_sensor.html",
              "id": "a1748c60e2e5b27e7f9fa8b75d3671397",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "enableModbus",
              "brief": "Enable Modbus communication on the sensor.",
              "description": "<p>The modbus enable command is in <s>input</s> <strong>holding</strong> register 0x0140 (decimal 320).</p><p>Modbus is enabled immediately after the response</p><aside class=\"m-note m-info\"><h4>Note</h4><p>The reverse of this command is <a href=\"#ae0ae3cfc4da64de56fddf66f44d7679a\" class=\"m-doc\">enableTerminal()</a></p></aside><aside class=\"m-note m-danger\"><h4>Warning</h4><p>This command does not seem to work properly!</p></aside>",
              "return_value": "True if the operation was successful, false otherwise.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": []
            }
          ],
          [
            "func",
            {
              "base_url": "classanb_sensor.html",
              "id": "aad0aba0d6bfff4ab7c0dc9a0d5e61bcb",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "forceModbus",
              "brief": "Attempt to force the sensor to enter Modbus mode by sending the command via serial mode.",
              "description": "<aside class=\"m-note m-dim\"><h4><a href=\"todo.html#_todo000001\" class=\"m-doc\">Todo</a></h4><p>Figure out how long the reboot takes!</p></aside>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": []
            }
          ],
          [
            "func",
            {
              "base_url": "classanb_sensor.html",
              "id": "ae0ae3cfc4da64de56fddf66f44d7679a",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "enableTerminal",
              "brief": "Change to terminal (RS232) communication mode on the sensor.",
              "description": "<p>The terminal enable command is in <s>input</s> <strong>holding</strong> register 0x003B (decimal 59).</p><p>Terminal communication is enabled <strong>on the next boot</strong>. If you need to immediately switch to terminal mode without rebooting, you can send the characters #700. This action prohibits the use of 0x23 (0x23 = #) as a Modbus address.</p><aside class=\"m-note m-info\"><h4>Note</h4><p>The reverse of this command is <a href=\"#a1748c60e2e5b27e7f9fa8b75d3671397\" class=\"m-doc\">enableModbus()</a></p></aside>",
              "return_value": "True if the operation was successful, false otherwise.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": []
            }
          ],
          [
            "func",
            {
              "base_url": "classanb_sensor.html",
              "id": "aa630a1f7bace68795c4044453ca87b21",
              "include": null,
              "has_details": false,
              "type": "void",
              "name": "forceTerminal",
              "brief": "Attempt to force the sensor to immediately enter terminal mode by sending the #700 command.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": []
            }
          ],
          [
            "func",
            {
              "base_url": "classanb_sensor.html",
              "id": "a4ee9e87584f31c4ed2728f30664dd3b7",
              "include": null,
              "has_details": true,
              "type": "<a href=\"_a_n_b_sensors_modbus_8h.html#a54c07bbd116af3304b00ae4257583572\" class=\"m-doc\">ANBSensorBaud</a>",
              "name": "getBaud",
              "brief": "Get the sensor modbus baud rate.",
              "description": "<p>The baud rate is in the lower byte of <s>input</s> <strong>holding</strong> register 0x003A (decimal 58).</p><p>The factory default value is <a href=\"_a_n_b_sensors_modbus_8h.html#a54c07bbd116af3304b00ae4257583572a64864b9332ddf712853b865c63ceed3e\" class=\"m-doc\">ANBSensorBaud::<wbr />BAUD57600</a> (7), corresponding to a baud rate of 57600.</p><aside class=\"m-note m-danger\"><h4>Warning</h4><p>NOT YET SUPPORTED BY MODBUS COMMANDS. The baud rate is <strong>write only</strong> from within the modbus interface.</p></aside>",
              "return_value": "A code for the baud rate",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classanb_sensor.html",
              "id": "a8701bb598a1c707164dd27dd17f9dd08",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "setBaud",
              "brief": "Set the sensor modbus baud.",
              "description": "<p>The baud rate is in <s>input</s> <strong>holding</strong> register 0x003A (decimal 58).</p><p>The new baud rate <strong>does not take effect</strong> until the next bootup.</p><p>Change this value to any of the following valid values:</p><p><a href=\"_a_n_b_sensors_modbus_8h.html#a54c07bbd116af3304b00ae4257583572a9be512a4edf5a33858c5b731d273ea44\" class=\"m-doc\">ANBSensorBaud::<wbr />BAUD9600</a> (1), <a href=\"_a_n_b_sensors_modbus_8h.html#a54c07bbd116af3304b00ae4257583572aead3f790ebe20323a62103245c490122\" class=\"m-doc\">ANBSensorBaud::<wbr />BAUD14400</a> (2), <a href=\"_a_n_b_sensors_modbus_8h.html#a54c07bbd116af3304b00ae4257583572abe046d6ceccce9d36a983ec2b9d6bcb0\" class=\"m-doc\">ANBSensorBaud::<wbr />BAUD19200</a> (3), <a href=\"_a_n_b_sensors_modbus_8h.html#a54c07bbd116af3304b00ae4257583572af414813c50f4a98c562e508904762e42\" class=\"m-doc\">ANBSensorBaud::<wbr />BAUD28800</a> (4), <a href=\"_a_n_b_sensors_modbus_8h.html#a54c07bbd116af3304b00ae4257583572a8494b6c137227734c4e771c9747e5eee\" class=\"m-doc\">ANBSensorBaud::<wbr />BAUD38400</a> (5), <a href=\"_a_n_b_sensors_modbus_8h.html#a54c07bbd116af3304b00ae4257583572aadf5f23bee99185a444416d280b0189f\" class=\"m-doc\">ANBSensorBaud::<wbr />BAUD56000</a> (6), <a href=\"_a_n_b_sensors_modbus_8h.html#a54c07bbd116af3304b00ae4257583572a64864b9332ddf712853b865c63ceed3e\" class=\"m-doc\">ANBSensorBaud::<wbr />BAUD57600</a> (7), <a href=\"_a_n_b_sensors_modbus_8h.html#a54c07bbd116af3304b00ae4257583572a0f7639fdd1803af75abc0dfa9cfe97a8\" class=\"m-doc\">ANBSensorBaud::<wbr />BAUD115200</a> (8)</p>",
              "return_value": "True if the baud rate was successfully set, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "newSensorBaud",
                  "type": "<a href=\"_a_n_b_sensors_modbus_8h.html#a54c07bbd116af3304b00ae4257583572\" class=\"m-doc\">ANBSensorBaud</a>",
                  "type_name": "<a href=\"_a_n_b_sensors_modbus_8h.html#a54c07bbd116af3304b00ae4257583572\" class=\"m-doc\">ANBSensorBaud</a> newSensorBaud",
                  "default": null,
                  "description": "The new baud rate to use",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classanb_sensor.html",
              "id": "a66c657598cea3546c88fd5284b065dfe",
              "include": null,
              "has_details": true,
              "type": "byte",
              "name": "getAddress",
              "brief": "Gets the modbus sensor (slave) address.",
              "description": "<p>The address is in the lower byte of <s>input</s> <strong>holding</strong> register 0x0039 (decimal 57).</p><aside class=\"m-note m-danger\"><h4>Warning</h4><p>NOT YET SUPPORTED BY MODBUS COMMANDS. The modbus address is <strong>write only</strong> from within the modbus interface.</p></aside>",
              "return_value": "The modbus address of the ANB pH sensor",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classanb_sensor.html",
              "id": "a1049df025501d7e692206adf8a1800af",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "setAddress",
              "brief": "Set a new modbus sensor (slave) address.",
              "description": "<p>The address change will take effect on the next boot.</p><aside class=\"m-note m-info\"><h4>Note</h4><p>The default Modbus address is 0x55, but it can be any number between 1 and 247 <strong>except</strong> 0x23 (decimal 35).</p></aside><aside class=\"m-note m-danger\"><h4>Warning</h4><p>The address 0x23 cannot be used!</p></aside><p>The address is in the lower byte of <s>input</s> <strong>holding</strong> register 0x0039 (decimal 57).</p>",
              "return_value": "True if the slave ID was successfully set, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "newSensorAddress",
                  "type": "byte",
                  "type_name": "byte newSensorAddress",
                  "default": null,
                  "description": "The new address (slave ID) for the ANB pH sensor",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classanb_sensor.html",
              "id": "ac412e3764ce86539150603439d2e405a",
              "include": null,
              "has_details": true,
              "type": "String",
              "name": "getSerialNumber",
              "brief": "Gets the instrument serial number as a String.",
              "description": "<p>The serial number takes up 3 holding registers starting at 0x000A (decimal 10).</p>",
              "return_value": "The serial number of the ANB pH sensor",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classanb_sensor.html",
              "id": "a84c69b26207e15f5e4352642437ce199",
              "include": null,
              "has_details": true,
              "type": "String",
              "name": "getManufacturer",
              "brief": "Gets the instrument manufacturer as a String.",
              "description": "<p>The manufacturer information takes up 8 holding registers starting at 0x000D (decimal 13).</p>",
              "return_value": "The manufacturer of the ANB pH sensor; this should return &quot;ANB\nSensors&quot;",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classanb_sensor.html",
              "id": "ab2952263195c45221ddee958cefebbf6",
              "include": null,
              "has_details": true,
              "type": "String",
              "name": "getName",
              "brief": "Gets the sensor name as a String.",
              "description": "<p>The sensor name takes up 8 holding registers starting at 0x0015 (decimal 21).</p>",
              "return_value": "The name of the ANB pH sensor",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classanb_sensor.html",
              "id": "a0633ab896f2fef817bf308e1e56c46cd",
              "include": null,
              "has_details": true,
              "type": "String",
              "name": "getSubName",
              "brief": "Gets the sensor sub-name as a String.",
              "description": "<p>The sensor sub-name takes up 8 holding registers starting at 0x001D (decimal 29).</p>",
              "return_value": "The sub-name of the ANB pH sensor",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classanb_sensor.html",
              "id": "afcdb095ada384b6ea486c1ed7d55bc95",
              "include": null,
              "has_details": true,
              "type": "String",
              "name": "getInterfaceVersion",
              "brief": "Gets the interface firmware (IF) version as a String.",
              "description": "<p><a href=\"https://www.anbsensors.com/newdocs/docs/Firmware/new-firmware\">New firmware and firmware change logs are available here.</a> <a href=\"https://www.anbsensors.com/newdocs/docs/Firmware/firmware-archive\">Older firmware is archived here</a></p><p>The interface firmware (IF) version takes up 8 holding registers starting at 0x0025 (decimal 37).</p>",
              "return_value": "The interface firmware (IF)version of the ANB pH sensor",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classanb_sensor.html",
              "id": "a2af9ac353f154b519391e0a4bf14e20f",
              "include": null,
              "has_details": true,
              "type": "String",
              "name": "getDriverVersion",
              "brief": "Gets the driver (DV) firmware version as a String.",
              "description": "<p><a href=\"https://www.anbsensors.com/newdocs/docs/Firmware/new-firmware\">New firmware and firmware change logs are available here.</a> <a href=\"https://www.anbsensors.com/newdocs/docs/Firmware/firmware-archive\">Older firmware is archived here</a></p><p>The driver (DV) firmware version takes up 8 holding registers starting at 0x002D (decimal 45).</p>",
              "return_value": "The driver (DV) firmware version of the ANB pH sensor",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classanb_sensor.html",
              "id": "a8f74abf5dff4519944f6bb08b55b8eea",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "getRTC",
              "brief": "Gets the current RTC (Real-Time Clock) value on the sensor.",
              "description": "<p>The RTC value is stored in 6 holding registers starting at 0x003D (decimal 61).</p>",
              "return_value": "True if the RTC value was successfully retrieved, false otherwise.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "seconds",
                  "type": "uint16_t&amp;",
                  "type_name": "uint16_t&amp; seconds",
                  "default": null,
                  "description": "Reference to a variable where the seconds will be stored",
                  "direction": ""
                },
                {
                  "name": "minutes",
                  "type": "uint16_t&amp;",
                  "type_name": "uint16_t&amp; minutes",
                  "default": null,
                  "description": "Reference to a variable where the minutes will be stored",
                  "direction": ""
                },
                {
                  "name": "hours",
                  "type": "uint16_t&amp;",
                  "type_name": "uint16_t&amp; hours",
                  "default": null,
                  "description": "Reference to a variable where the hours will be stored",
                  "direction": ""
                },
                {
                  "name": "day",
                  "type": "uint16_t&amp;",
                  "type_name": "uint16_t&amp; day",
                  "default": null,
                  "description": "Reference to a variable where the day will be stored",
                  "direction": ""
                },
                {
                  "name": "month",
                  "type": "uint16_t&amp;",
                  "type_name": "uint16_t&amp; month",
                  "default": null,
                  "description": "Reference to a variable where the month will be stored",
                  "direction": ""
                },
                {
                  "name": "year",
                  "type": "uint16_t&amp;",
                  "type_name": "uint16_t&amp; year",
                  "default": null,
                  "description": "Reference to a variable where the year will be stored",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classanb_sensor.html",
              "id": "adc34cfe98a243d2dc6492184075f1c9f",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "setRTC",
              "brief": "Set a new RTC (Real-Time Clock) value on the sensor.",
              "description": "<p>The RTC value is stored in 6 holding registers starting at 0x003D (decimal 61).</p>",
              "return_value": "True if the RTC value was successfully set, false otherwise.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "seconds",
                  "type": "uint16_t",
                  "type_name": "uint16_t seconds",
                  "default": null,
                  "description": "The seconds portion of the current time",
                  "direction": ""
                },
                {
                  "name": "minutes",
                  "type": "uint16_t",
                  "type_name": "uint16_t minutes",
                  "default": null,
                  "description": "The minutes portion of the current time",
                  "direction": ""
                },
                {
                  "name": "hours",
                  "type": "uint16_t",
                  "type_name": "uint16_t hours",
                  "default": null,
                  "description": "The hours portion of the current time",
                  "direction": ""
                },
                {
                  "name": "day",
                  "type": "uint16_t",
                  "type_name": "uint16_t day",
                  "default": null,
                  "description": "The day portion of the current time",
                  "direction": ""
                },
                {
                  "name": "month",
                  "type": "uint16_t",
                  "type_name": "uint16_t month",
                  "default": null,
                  "description": "The month portion of the current time",
                  "direction": ""
                },
                {
                  "name": "year",
                  "type": "uint16_t",
                  "type_name": "uint16_t year",
                  "default": null,
                  "description": "The year portion of the current time",
                  "direction": ""
                }
              ]
            }
          ]
        ]
      },
      {
        "name": "Debugging functions",
        "id": "debugging-functions",
        "description": "<p><a name=\"debugging\"></a></p><aside class=\"m-note m-info\"><h4>Note</h4><p>These functions control the debugging output of the Modbus communication. They are intended for debugging the communication and Modbus commands. These functions should not be used in production code as they can affect performance.</p></aside><aside class=\"m-note m-danger\"><h4>Warning</h4><p>These functions are <strong>not</strong> for debugging the actual operation and quality of the sensor values!</p></aside>",
        "members": [
          [
            "func",
            {
              "base_url": "classanb_sensor.html",
              "id": "a1c68435d12d2c767183ed7eab83fb37a",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "setDebugStream",
              "brief": "Set a stream for debugging information to go to.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "stream",
                  "type": "Stream*",
                  "type_name": "Stream* stream",
                  "default": null,
                  "description": "An Arduino stream object",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classanb_sensor.html",
              "id": "abd5eaf3f723962d66e34c6602d17c1eb",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "setDebugStream",
              "brief": "Set a stream for debugging information to go to.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "stream",
                  "type": "Stream&amp;",
                  "type_name": "Stream&amp; stream",
                  "default": null,
                  "description": "An Arduino stream object",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classanb_sensor.html",
              "id": "a4892c941d65b1aa89069dc82ac9a535c",
              "include": null,
              "has_details": false,
              "type": "void",
              "name": "stopDebugging",
              "brief": "Un-set the stream for debugging information to go to; stop debugging.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ]
        ]
      }
    ],
    "has_enum_details": false,
    "has_typedef_details": false,
    "has_func_details": true,
    "has_var_details": false,
    "has_define_details": false,
    "breadcrumb": [
      [
        "anbSensor",
        "classanb_sensor.html"
      ]
    ],
    "breadcrumbGroup": [
      [
        "anbSensor",
        "classanb_sensor.html"
      ]
    ],
    "is_final": false,
    "prefix_wbr": "anbSensor::<wbr />"
  }
}